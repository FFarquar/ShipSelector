@page "/addRuleSetSpecifc/{unitId:int}"
@using ShipSelector.Services.UnitsandListsServiceClient
@inject IUnitsandListsServiceClient ULSC
@inject ILogger<Index> _logger;
@inject NavigationManager NM
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject IWebAssemblyHostEnvironment Env

    @* This page shouldnt be visible in prod *@
<div  hidden="@Env.IsProduction()">

<h3>Add Rule Set Specific</h3>


   @if(unitsForSpecificGameList == null || unitsForSpecificGameList.Count == 0)
    {
        <span>Loading records/No records found</span>
    }
    else
    {



       <table class="table table-striped table-bordered">
       
            <thead class="thead-dark">
                    <tr>
                        <th scope="col">Unit Id</th>
                        <th scope="col">Unit name</th>
                        <th scope="col">Country</th>
                        <th scope="col">Rule Set</th>
                        <th scope="col">Cost</th>
                        <th scope="col">Image Name</th>
                        <th scope="col">Edit</th>
                        <th scope="col">Delete</th>
                    </tr>
            </thead>

            <tbody>
                @foreach (var gameSpec in unitsForSpecificGameList)
                {
                    <tr>
                          <td>@gameSpec.UnitId</td>
                          <td>@gameSpec.Unit.Name_ClassName</td>
                          <td>@gameSpec.Unit.Country.CountryName</td>
                          <td>@gameSpec.Ruleset.RulesetName</td>
                          <td>@gameSpec.Cost</td>
                          <td>@gameSpec.ImagePath</td>
                          
                          @{int gameSpecId = @gameSpec.Id;}
                          <td>
                                
                                <button type="button" @onclick="() => EditGameSpecDetails(gameSpecId)" class="btn btn-secondary fa fa-sticky-note-o"> Edit</button>
                          </td>
                          <td>
                                <button type="button" @onclick="() => DeleteGameSpecDetails(gameSpecId)" class="btn btn-secondary fa fa-sticky-note-o"> Delete</button>
                          </td>
                    </tr>
                }
            </tbody>
       </table>
       }

       @if(unit != null && unit.Id != 0)
        {
            <EditForm Model="gameSpecificRequest" OnValidSubmit="AddNewGameSpecifcDetail">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="mb-3">
                    <label for="name">@unit.Name_ClassName</label>
                </div>

                <label for="RulesetId">Rule set</label>
                <InputSelect id="RulesetId" @bind-Value="gameSpecificRequest.RulesetId" class="form-control">

                        <option value="">--Select Rule Set--</option>

                        @foreach(var rules in rulesetList)
                        {
                        <option value="@rules.Id"> @rules.RulesetName</option>
                        }
                </InputSelect> 

                <div class="mb-3">
                    <label for="cost">Cost of unit</label>
                    <InputNumber id="cost" @bind-Value="gameSpecificRequest.Cost" class="form-control"/>
                    <ValidationMessage For="@(() => gameSpecificRequest.Cost)" />
                </div>

                
                @if(gameSpecIdToWorkOn == -1)
                {
                    @*Working on new game spec*@
                    <AddDeleteAttachments AddItemsToHost="AddItemsToFileList" ItemsToUpload=filesToUploadDTO modeUsingIn=AddDeleteAttachments.modeRunningIn.AddMode/>
                    <button type="submit" class="btn btn-primary">Add ruleset details</button>
                    
                }
                else
                {
                    @*Editing an existing item*@
                    <AddDeleteAttachments AddItemsToHost="AddItemsToFileList" ItemsToUpload=filesToUploadDTO modeUsingIn=AddDeleteAttachments.modeRunningIn.EditMode/>
                    <button type="submit" class="btn btn-primary">Amend details</button>
                    
                }

                    @messageGameSpec
            </EditForm>    
        }

</div>

@code {
    [Parameter]
    public int unitId { get; set; } = 0;

    //TODO: the file attachments when editing are nto showing check the if statement above
    public int gameSpecIdToWorkOn { get; set; } = -1;
    GameSystemUnitSpecificDetail gameSpecificRequest = new GameSystemUnitSpecificDetail();
    private  List<RuleSet> rulesetList = new List<RuleSet>();
    private List<GameSystemUnitSpecificDetail> unitsForSpecificGameList = new List<GameSystemUnitSpecificDetail>();
    public List<FileUploadDTO> filesToUploadDTO = new List<FileUploadDTO>();

    private Unit unit = new Unit();
    string messageGameSpec = string.Empty;
    private bool init;
    protected override async Task OnInitializedAsync()
    {

        base.OnInitialized();

        GetListOfGameSpecificUnitDetails();

        var result = await ULSC.GetUnitWithoutChildObjects(unitId);
        unit = result.Data;


        var ruleResult = await ULSC.GetRuleSets();
        rulesetList = ruleResult.Data;

    }

    private async Task  GetListOfGameSpecificUnitDetails()
    {
        unitsForSpecificGameList.Clear();
        var gameSpecificDetails = await ULSC.GetGameSystemUnitSpecificDetails(unitId);
        unitsForSpecificGameList = gameSpecificDetails.Data;
        //        _logger.LogInformation("Retuned " + gameSpecificDetails.Data.Count + "  records from DB");
        StateHasChanged();
    }

    private async Task AddNewGameSpecifcDetail()
    {
        gameSpecificRequest.UnitId = unitId;

        if(filesToUploadDTO.Count ==0 )
        {
            messageGameSpec = "Add an image";
            return;
        }

        if(gameSpecIdToWorkOn == -1)
        {
            //adding new detail
            gameSpecificRequest.ImagePath = filesToUploadDTO[0].FileName;

            //var result = await ULSC.AddGameSystemUnitSpecificDetail(gameSpecificRequest);
            var result = await ULSC.AddGameSystemUnitSpecificDetail(gameSpecificRequest, filesToUploadDTO, unit.CountryId);
            messageGameSpec = result.Message;

            if(result.Success)
            {
                gameSpecificRequest.Cost = 0;
                gameSpecificRequest.ImagePath = string.Empty;
                gameSpecificRequest.RulesetId = 0;
                filesToUploadDTO = new List<FileUploadDTO>();
                GetListOfGameSpecificUnitDetails();
            }
        }
        else
        {
            //Editing existing details
            //TODO: update the edit here
            messageGameSpec = "This has to be implemened";
        }



    }

    private async Task AddItemsToFileList(List<FileUploadDTO> files)
    {

        filesToUploadDTO = files;
    }

    private async Task EditGameSpecDetails(int gameSpecId)
    {
        Console.WriteLine("Edit this " + gameSpecId);
        gameSpecIdToWorkOn = gameSpecId;

        //find the details to complete the UI
        foreach (var item in unitsForSpecificGameList)
        {
            if(item.Id == gameSpecId)
            {
                gameSpecificRequest = item;
                break;
            }
        }


        //TODO: set his to -1 when details are saved. UP TO HERE
        //gameSpecIdToWorkOn = -1;
    }
    private async Task DeleteGameSpecDetails(int gameSpecId)
    {
        gameSpecIdToWorkOn = gameSpecId;
        Console.WriteLine("Delete this " + gameSpecId);
        //TODO: Delete details here
        
        //TODO: set his to -1 when handler implemented
        //gameSpecIdToWorkOn = -1;
    }

}
