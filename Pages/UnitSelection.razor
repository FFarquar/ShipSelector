@page "/unitselectionrules2/{rulesetid:int}"
@using ShipSelector.Services.UnitsandListsServiceClient
@using ShipSelector.Services.UploadDownloadService
@inject IUnitsandListsServiceClient ULSC
@inject IStorageService StorServ
@inject NavigationManager NM
@inject IUploadDownloadServiceClient UDSC
@inject IJSRuntime JS



<h3>Select units for @ruleSet.RulesetName</h3>
<EditForm Model="request" OnValidSubmit="getListOfUnits">
    <div class="form-check" hidden=@HideCollectionOption>
      <input class="form-check-input" type="checkbox" id="flexCheckDefault" @bind-value=@request.OnlyReturnUnitsInCollection>
      <label class="form-check-label" for="flexCheckDefault">
        Choose only from owned units?
      </label>
    </div>
        <button type="submit" class="btn btn-primary" hidden=@HideCollectionOption>Get units</button>
</EditForm>


<div id="mainselection" hidden=@HideMainForm>
    
    <div style="display:inline-block">
        <select class="form-select" aria-label="Default select example" @onchange="HandleChangeCountry" >

          <option value="" selected disabled hidden>Choose Country</option>
            @foreach(var country in Countries)
            {
                <option value="@country.Id"> @country.CountryName</option>
            }
        </select>
    </div>

    <div style="display:inline-block">
        <select class="form-select" aria-label="Default select example" @onchange="@HandleChangeUnitType" >

            <option value="" selected disabled hidden>Choose unit type</option>
            @foreach(var unit in UnitTypes)
            {
                <option value="@unit.Id"> @unit.Name </option>
            }
        </select>
    </div>
</div>

                                
    <div hidden=@HideMainForm>
        
       @if(CompleteUnitList == null || CompleteUnitList.Count == 0)
        {
            <span>
                <p class="lead">
                    Waiting on selection/No records found
                </p>
            

            </span>
        }
        else
        {
            
            <table hidden=@HideMainForm>
                
              <tr>
                <td class="vertalignCell">

                    <p class="lead">
                        Units available for selection
                    </p>

                       <table class="table table-striped table-bordered">
       
                            <thead class="thead-dark">
                                    <tr>
                                        <th scope="col">Unit Type</th>
                                        <th scope="col">Class</th>
                                        @if(request.OnlyReturnUnitsInCollection)
                                        {
                                            <th>Name</th>
                                        }
                                        else
                                        {
                                            <th># available</th>    
                                            <th>Selected</th>    
                                        }
                                        <th scope="col">Image</th>
                                        <th scope="col">Cost</th>
                                        <th scope="col">Add unit</th>
                                    </tr>
                            </thead>

                            <tbody>


                                @{int i = 0;}
                                @foreach (var unit in CompleteUnitList)
                                @*@foreach (var unit in ULSC.UnitList)*@
                                {

                                @if (unit.FilterVisible == true && unit.AddButtonDisabled == false)
                                                {
                                    i = i + 1;
                                    <tr>
                                            <td>@unit.subUnitTypeObj.SubUnitName</td>
                                            <td>@unit.Name_ClassName</td>

                                            @if(request.OnlyReturnUnitsInCollection)
                                            {
                                                <td>@unit.ShipsSubsInClass</td>
                                            }
                                            else
                                            {
                                                <td>@unit.NumberinClass_shipSub</td>
                                                <td>@unit.NumberSelected</td>
                                            }


                                            @{var imagename = "Image_" + i;}
                                            @*THIS SECTION OF THE CODE IS USED IF THE images are taken from the Server*@

@*                                            
                                            @{var srcRef = @ViewFIle(@unit,@imagename);}

                                            <td>

                                              <img class="img" srcRef style="border:5px solid #000000; max-width:200px;max-height:200px"  id=@imagename/>
                                            </td>
*@
                                            <td>
                                                
                                              @*THIS SECTION IS USED IF WANT TO READ THE FILES LOCALLY*@
                                            @{
                                                var srcLocationLocal = "ShipImages/" + @RuleSetId + "/" + unit.Countryobj.Id + "/"+ unit.ImagePath;
                                            }


                                            <img class="img" src=@srcLocationLocal style="border:5px solid #000000; max-width:200px;max-height:200px"  id=@imagename/>
                                            </td>

                                            <td>@unit.Cost</td>
                                            <td>
                                                    <fieldset disabled=@unit.AddButtonDisabled>
                                                        <button class=@unit.styleForAddButton @onclick="() => AddToList(unit)">
                                                            <i class="oi oi-plus"></i>&nbsp;&nbsp;&nbsp;Add
                                                        </button>
                                                    </fieldset>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                       </table>

                </td>
                <td class="vertalignCell">

                    <p class="lead">
                        Selected units. Cost of selected units = @costOfSelectedUnits
                    </p>
                 
                       <table class="table table-striped table-success table-bordered">
       
                            <thead class="thead-dark">  
                                    <tr>
                                        <th scope="col">Country</th>
                                        <th scope="col">Unit type</th>
                                        <th scope="col">Class</th>
                                        @if(!request.OnlyReturnUnitsInCollection)
                                        {
                                            <th># selected</th>
                                        }
                                        else
                                        {
                                            <th>Name</th>
                                        }
                                <th scope="col">Cost</th>
                                        <th scope="col">Image</th>
                                        <th scope="col">Remove</th>
                                    </tr>
                            </thead>

                            <tbody>
                                @foreach (var unit in CompleteUnitList)
                                @*@foreach (var unit in ULSC.UnitList)*@
                                {
                                    @if(unit.NumberSelected > 0)
                                    {
                                        <tr>
                                            <td>@unit.Countryobj.CountryName</td>
                                            <td>@unit.subUnitTypeObj.SubUnitName</td>
                                            <td> @unit.Name_ClassName</td>

                                            @if(!request.OnlyReturnUnitsInCollection)
                                            {
                                            <td>@unit.NumberSelected</td>
                                            }
                                            else
                                            {
                                            <td>@unit.ShipsSubsInClass</td>                                            
                                            }

                                            <td>@unit.Cost</td>

                                            @{var imagename = "Image_" + i;}
                                            @*THIS SECTION OF THE CODE IS USED IF THE images are taken from the Server*@

@*                                            
                                            @{var srcRef = @ViewFIle(@unit,@imagename);}

                                            <td>

                                              <img class="img" srcRef style="border:5px solid #000000; max-width:200px;max-height:200px"  id=@imagename/>
                                            </td>
*@
                                            <td>
                                                
                                              @*THIS SECTION IS USED IF WANT TO READ THE FILES LOCALLY*@
                                            @{
                                                var srcLocationLocal = "ShipImages/" + @RuleSetId + "/" + unit.Countryobj.Id + "/"+ unit.ImagePath;
                                                }
                                                <img class="img" src=@srcLocationLocal style="border:5px solid #000000; max-width:200px;max-height:200px"  id=@imagename/>
                                            </td>
                                            <td>
                                                    <fieldset disabled=@unit.RemoveButtonDisabled>
                                                        <button class=@unit.styleForRemoveButton @onclick="() => RemoveFromList(unit)">
                                                            <i class="oi oi-minus"></i>&nbsp;&nbsp;&nbsp;Remove
                                                        </button>
                                                    </fieldset>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                            <tr>

                                <button hidden=@CreateListHidden class="btn btn-danger" @onclick="() => CreateList()">
                                    <i class="oi oi-document"></i>&nbsp;&nbsp;&nbsp;Create list
                                </button>

                            </tr>
                       </table>
                </td>
              </tr>
            </table>


       }


    </div>

@code {
    [Parameter]
    public int RuleSetId { get; set; } = 0;
    //private int i = 0;
    //private bool ChooseFromOwnedColleciton { get; set; } = false;
    private bool HideCollectionOption { get; set; } = false;
    private bool HideMainForm { get; set; } = true;


    private RuleSet ruleSet { get; set; } = new RuleSet();

    RequestForUnitDetails request = new RequestForUnitDetails();

    private List<Country> Countries = new List<Country>();
    private List<UnitType> UnitTypes = new List<UnitType>();
    private IJSObjectReference? _jsModule;

    private ViewFilter viewFilter = new ViewFilter();

    private int costOfSelectedUnits = 0;
    private bool CreateListHidden = true;

    private List<UnitForGameSystemDTO> CompleteUnitList = new List<UnitForGameSystemDTO>();  //A list of all items that are selectable

    private async Task ViewFIle(UnitForGameSystemDTO unit, string imageId)
    {
        Console.WriteLine("___ViewFile =" + unit.Name_ClassName);

        var resultOfService = await UDSC.GetFileAsStream(unit, RuleSetId);

        if (resultOfService.Success)
        {
            unit.imageStream = resultOfService.Data;
        }
        Console.WriteLine("Image length =" + unit.imageStream.Length);

        if(unit.imageStream != null)
        {


            var streamRef = new DotNetStreamReference(stream: unit.imageStream);
            if(streamRef ==null)
            {
                Console.WriteLine("ERROR Attempting to seImageUsingStreaming for " + imageId + " Streamref is null");
                return;
            }

            await JS.InvokeVoidAsync("setImageUsingStreaming", imageId, streamRef);   
        }
        else
        {
            Console.WriteLine("ERROR Attempting to seImageUsingStreaming unit.Imagestream is null");
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //_jsModule ??= await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/UnitSelection2.razor.js");
            _jsModule ??= await JS.InvokeAsync<IJSObjectReference>("import", "./css/fileScripts.js");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        request.RuleSetId = RuleSetId;
        base.OnInitialized();

        var rulesetResponse = await ULSC.GetRuleSet(RuleSetId);
        ruleSet = rulesetResponse.Data;


        //request.RuleSetId = Int16.Parse(RuleSetId);
        //var resultCountries = await ULSC.GetListOfCountries();
        var resultCountries = await ULSC.GetListOfCountriesForSelectedUnitsInGameSystem(RuleSetId);
        Countries = resultCountries.Data;

        var resultUnitTypes = await ULSC.GetListOfUnitTypes();
        UnitTypes = resultUnitTypes.Data;
    }

    private async Task getListOfUnits()
    {

        HideCollectionOption = true;
        HideMainForm = false;
        CompleteUnitList.Clear();
        var resultUnits = await ULSC.GetListofAllGameUnitsForRuleset(request.RuleSetId, request.OnlyReturnUnitsInCollection);
        CompleteUnitList = resultUnits.Data;

    }

    private class ViewFilter
    {
        public int CountryId{ get; set; }
        public int UnitTypeId{ get; set; }
    }

    public void HandleChangeUnitType(ChangeEventArgs args)
    {
        foreach(var u in UnitTypes)
        {
            if (u.Id == int.Parse(args.Value.ToString()))
            {
                viewFilter.UnitTypeId = u.Id;
                break;
            }
        }

        FilterView();
    }

    public void HandleChangeCountry(ChangeEventArgs args)
    {
        foreach(var c in Countries)
        {
            if (c.Id == int.Parse(args.Value.ToString()))
            {
                viewFilter.CountryId= c.Id;
                break;
            }
        }
        FilterView();
    }

    private async void FilterView()
    {

        if(viewFilter.CountryId == 0 || viewFilter.UnitTypeId == 0)
        {
            return;
        }

        foreach (var unit in CompleteUnitList)
        //foreach (var unit in ULSC.UnitList)
        {
            if((unit.Countryobj.Id == viewFilter.CountryId) && (unit.subUnitTypeObj.UnitTypeId == viewFilter.UnitTypeId))

            {
                unit.FilterVisible = true;

                ////If the image hasnt been retrieved, get it 
                //if (unit.imageStream is null)
                //{
                //    var resultOfService = await UDSC.GetFileAsStream(unit, RuleSetId);

                //    if (resultOfService.Success)
                //    {
                //        unit.imageStream = resultOfService.Data;
                //    }
                //    else
                //    {
                //        Console.WriteLine($"Image {unit.ImagePath} {unit.Name_ClassName} not reuturned from API");
                //    }
                //}
            }
            else
            {
                unit.FilterVisible = false;
            }
        }

        StateHasChanged();

    }

    private async void RemoveFromList(UnitForGameSystemDTO unitToRemove)
    {
        //remove from selection
        unitToRemove.NumberSelected --;

        SetAddRemoveButtonStyle(unitToRemove);
        UpdateCostOfSelecton();
        StateHasChanged();
    }

    private async void AddToList(UnitForGameSystemDTO unitToAdd)
    {
        //Add unit to selection
        unitToAdd.NumberSelected ++;
        SetAddRemoveButtonStyle(unitToAdd);
        UpdateCostOfSelecton();
    }

    private async void SetAddRemoveButtonStyle(UnitForGameSystemDTO unitToAdd)
    {

        if(unitToAdd.NumberSelected >= unitToAdd.NumberinClass_shipSub)
        {
            unitToAdd.AddButtonDisabled = true;
            unitToAdd.styleForAddButton = Settings.styleForButonNotAvailable; 
        }
        else
        {
            unitToAdd.AddButtonDisabled = false;
            unitToAdd.styleForAddButton = Settings.styleForButtonAvailable;
        }

        if(unitToAdd.NumberSelected >= 1)
        {
            unitToAdd.RemoveButtonDisabled = false;
            unitToAdd.styleForRemoveButton = Settings.styleForButtonAvailable;
        }
        else
        {
            unitToAdd.RemoveButtonDisabled = true;
            unitToAdd.styleForRemoveButton = Settings.styleForButonNotAvailable;
        }
    }

    private async void UpdateCostOfSelecton()
    {
        int cost = 0;

        foreach (var unit in CompleteUnitList)
        //foreach (var unit in ULSC.UnitList)
        {
            if(unit.NumberSelected > 0 )
            {
                cost = cost + (unit.NumberSelected * unit.Cost);
            }
        }

        if(cost == 0 )
        {
            CreateListHidden = true;
        }
        else
        {
            CreateListHidden = false;
        }

        costOfSelectedUnits = cost;
        //StateHasChanged();
    }

    private async void CreateList()
    {
        var result = await StorServ.AddUnitsToStorage(CompleteUnitList);


        await JS.InvokeAsync<object>("open", "printpage/"+RuleSetId+"/"+@request.OnlyReturnUnitsInCollection, "_blank");


    }
}
