
@page "/broadsideSD"
@layout NoMenuLayout
@inject IStorageService StorServ
@using ShipSelector.Services.UnitsandListsServiceClient

@inject IUnitsandListsServiceClient ULSC

@* 
    This site advised how to use the Navigationlock to stop inadvertently navigating away from the page to save data.
    Had to update VS 2022 and update to .Net 8 and then fix this project (update packages and rebuild). Surprised it actually worked.
    https://mattjameschampion.com/2023/07/04/controlling-and-preventing-navigation-events-in-blazor-using-navigationlock/
 *@

<NavigationLock ConfirmExternalNavigation="@ConfirmExternalNavigation" OnBeforeInternalNavigation="@OnBeforeInternalNavigation"></NavigationLock> 


@* <label for="confirm-external-navigation-checkbox">Confirm External Navigation</label>
<input id="confirm-external-navigation-checkbox" type="checkbox" @bind="@ConfirmExternalNavigation">
 *@



<main class="main">
    <div class="main_heading">
        @* <h4>Select a Ship</h4> *@
        <h2 class="ship_name_heading">@selectedShip.ShipName</h2>

    </div>

    <div class="main_container">
        <div class="ship_list_nav_bar_left_container">
            <div class="simple_ship_list" hidden="@(!ShowSimpleListOfShips)">
                @for (int r = 0; r < @BroadsideSDSList.Count; r++)
                {
                    var temp = r;
                    <button class="ship_button" @onclick="() => ChangeSelectedShip(BroadsideSDSList[temp])">@BroadsideSDSList[r].ShipName</button>
                }
            </div>

            <div class="expanded_ship_list" hidden ="@(ShowSimpleListOfShips)">
                @for (int r = 0; r < @BroadsideSDSList.Count; r++)
                {
                    var temp = r;
                    <div class="advanced_ship_view"> 
                        <button class="ship_button_advanced" @onclick="() => ChangeSelectedShip(BroadsideSDSList[temp])">@BroadsideSDSList[r].ShipName</button>
                        <label class="ship_label_adanced">@BroadsideSDSList[r].summaryText</label>
                    </div>
                }
            </div>

            <button class="toggle_advanced_list" @onclick="() => ToggleAdvancedShipView()">@toggleShipViewName</button>
        </div>

        <div class="ship_sds_status_right_container">
            <div class="SDS_and_Stats">
                <div class="SDS">
                    @* Contains only the ship image *@
                    @* <img class="ship_image" src="ShipImages/3/5/Pillau.jpg" /> *@
                    <img class="ship_image" src=@selectedShip.ImagePath/>

                </div>
                <div class="ship_current_stats_and_order">
                    @* Contains editiable fields for the ship *@
                    <div class="ship_stats">
                        <div class="rename_ship" hidden="@selectedShip.renameHidden">
                            <label for="rename_ship_input">Ship Name</label>
                            <input class="rename_ship_input_cl" id="rename_ship_input" type="text" @bind-value=@selectedShip.ShipName />
                        </div>

                        <div class="input_field">
                            <label title="The splash marker this ship is using" for="splash_label">Splash label Id</label>
                            <input class="stat_input" id="splash_label" type="text" title="The splash marker this ship is using" @bind-value=@selectedShip.DirectedGunTag />
                        </div>

                        <div class="input_field">
                            <label for="current_speed">Current Speed</label>
                            <input class="stat_input" id="current_speed" type="number" @bind-value=@selectedShip.CurrentSpeed />
                        </div>

                        <div class="input_field">
                            <label for="hull_hits">Hull Hits</label>
                            <input class="stat_input" id="hull_hits" type="number" @bind-value=@selectedShip.HullHits />
                        </div>
                        <div class="input_field">
                            <label title="Number of flooding hits" for="hull_hits">Flooding hits</label>
                            <input class="stat_input" id="hull_hits" type="number" title="Number of flooding hits" @bind-value=@selectedShip.FloodingHits />
                        </div>

                    </div>
                    <div class="torpedos">
                        <h5>Torpedoes</h5>

                        <div class="checkbox_option">
                            <label for="torpedos_fired">Torps used</label>
                            <input class="stat_input"  id="torpedos_fired" type="checkbox" @bind=@selectedShip.torpsFired />
                        </div>

                        <div class="checkbox_option">
                            <label for="port_wing_torp_fired">Port torps used</label>
                            <input class="stat_input" id="port_wing_torp_fired" type="checkbox" @bind=@selectedShip.portTorpsFired />
                        </div>

                        <div class="checkbox_option">
                            <label for="starb_wing_torp_fired">Starboard torps used </label>
                            <input class="stat_input" id="starb_wing_torp_fired" type="checkbox" @bind=@selectedShip.starTorpsFired />
                        </div>

                    </div>
                    <div class="ship_order">
                        <h5>Ship order</h5>
                        @* <select @bind=selectedShip.selectedOrderCard  Name="Name_of_list_box" @onclick="() => ChangeOrderImage()"> *@
                        <select class="ship_order_select" @bind=selectedShip.selectedOrderCard Name="Name_of_list_box" @bind:after="() => ChangeOrderImage()">

                            @for (int i = 0; i < @OrderCardList.Count; i++)
                            {
                                <option value=@OrderCardList[i].id>@OrderCardList[i].Name</option>
                            }
                        </select>
                        <div class="checkbox_option">
                            <label for="order_active">Order is active</label>
                            <input class="stat_input" id="order_active" type="checkbox" @bind=@selectedShip.orderIsActive />
                        </div>

                        <div class="ship_order_card_container">
                            @* <img class ="ship_order_card" src="BroadsidesCards/Orders/more_speed.jpg"/> *@
                            <img  class="ship_order_card" src="@selectedShip.selectedOrderImagePath" />
                        </div>
                    </div>

                </div>
            </div>
            <div class="damage_cards">
                <h4>Damage Cards</h4>

                <div>
                    <button class="add_damage_card" @onclick="() => AddDamageCard()">Add damage card</button>
                </div>
                <div class="damage_cards_container">
                    @foreach (var item in selectedShip.DamageCards)
                    {
                        <div class="damage_card_and_delete">

                            <img id="@item.id" class="damage_card" src=@item.ImagePath />
                            <PopContainer idOfelement="@item.id" ConfirmedChanged2="RemoveDamageCard" />
                        </div>
                    }
                </div>


            </div>
        </div>


    </div>
</main>

@code {
    [Inject] IJSRuntime? JsRuntime { get; set; }
    private List<BroadsideSDS> BroadsideSDSList = new List<BroadsideSDS>();  //A list of all items that have been selected

    //selectedShip is the ship that the user has selected. The first ship in the list will be selected upon creation of this list
    private BroadsideSDS selectedShip { get; set; } = new BroadsideSDS();
    private bool ConfirmExternalNavigation { get; set; } = true;


    private List<OrderCard> OrderCardList = new List<OrderCard>();  //a list of order cards

    private List<DamageCardData> DamageCardList = new List<DamageCardData>();  //a list of all damage cards. Used to create DamageCardDeck
    private List<DamageCard> DamageCardDeck = new List<DamageCard>();   //the deck of damage cards to be drawn from

    private bool ShowSimpleListOfShips { get; set; } = true;
    private string toggleShipViewName { get; set; } = "Show Summary";

    private async Task OnBeforeInternalNavigation(LocationChangingContext locationChangingContext)
    {
        if (JsRuntime is null) return;
        var continueNavigationEvent = await JsRuntime.InvokeAsync<bool>("confirm", $"You will loose any data enetered if you navigate away! Do you want to stuff it up?");
        if (!continueNavigationEvent) locationChangingContext.PreventNavigation();
    }


    protected override async Task OnInitializedAsync()
    {

        await BuildListOfOrderCards();
        await GetListOfDamageCards();

        base.OnInitialized();


        var SelectedUnitsResponse = await StorServ.RetrieveAllUnits();

        //convert the retrieved units into BroadsideSDS objects
        CreateSDSObjects(SelectedUnitsResponse.Data);

        await CreateDamageDeck();

    }
    #region  Damage card stuff

    private async Task RemoveDamageCard(int response)
    {

        if (response != 0)
        {
            Console.WriteLine("Remove card number = " + response);

            DamageCard dcToDelete = new DamageCard();
            foreach (var item in selectedShip.DamageCards)
            {
                if(item.id == response){
                    dcToDelete = item;
                }
            }

            selectedShip.DamageCards.Remove(dcToDelete);

            selectedShip.setSummaryText();
            ///have to delete the card from the collection. Get the id somehow
        }
    }
    private async Task CreateDamageDeck()
    {
        // Function creates a full deck of damage cards

        DamageCardDeck = new List<DamageCard>();
        int dcCount = 0;
        foreach (var item in DamageCardList)
        {

            for (int i = 0; i < item.number_cards; i++)
            {
                dcCount++;
                DamageCard dc = new DamageCard();
                dc.id = dcCount;
                dc.ImagePath = item.ImagePath;
                dc.Name = item.Name;
                DamageCardDeck.Add(dc);
            }
        }

        Console.WriteLine("Number of cards in DamageCardDeck = " + DamageCardDeck.Count);
    }


    private async Task GetListOfDamageCards()
    {
        //gets a list of all the cards and their numbers
        var broadsideCards = await ULSC.GetBroadSideDamageCards();

        int totalNumberOfCardsInDeck = 0;
        DamageCardList = new List<DamageCardData>();
        foreach (var item in broadsideCards.Data)
        {
            DamageCardData dc = new DamageCardData();

            dc.Name = item.Name;
            dc.ImagePath = item.ImagePath;
            dc.number_cards = item.number_cards;
            dc.id = item.id;
            totalNumberOfCardsInDeck = totalNumberOfCardsInDeck + dc.number_cards;
            DamageCardList.Add(dc);
        }

        // Console.WriteLine("Total num damage cards = " + totalNumberOfCardsInDeck);
    }


    private async void AddDamageCard()
    {
        //draws a damage card and adds it to the active ship

        selectedShip.DamageCards.Add(DrawDamageCard());
        selectedShip.setSummaryText();
        // Console.WriteLine("Card drawn = " + selectedShip.DamageCards[selectedShip.DamageCards.Count - 1].Name);
    }

    private  DamageCard DrawDamageCard() 
    {
        if (DamageCardDeck.Count ==0)
        {
            //create a new deck
            CreateDamageDeck();
            Console.WriteLine("Deck is being reshuffled");
        }

        Random r = new Random();
        int rInt = r.Next(0, DamageCardDeck.Count);

        //get the card
        DamageCard dcr = new DamageCard();
        dcr = DamageCardDeck[rInt];

        //remove it from the collection
        DamageCardDeck.Remove(dcr);

        return dcr;
    }

    #endregion

    private async Task BuildListOfOrderCards()
    {
        var broadsideCards = await ULSC.GetBroadSideOrderCards();

        OrderCardList = new List<OrderCard>();
        foreach (var item in broadsideCards.Data)
        {
            OrderCard oc = new OrderCard();

            oc.Name = item.Name;
            oc.ImagePath = item.ImagePath;
            oc.id = item.id;

            OrderCardList.Add(oc);
        }
    }

    private void ChangeOrderImage()
    {
        // selectedShip.selectedOrderImagePath = "/" + OrderCardList[selectedShip.selectedOrderCard].ImagePath;
        selectedShip.selectedOrderImagePath = OrderCardList[selectedShip.selectedOrderCard].ImagePath;
        Console.WriteLine("Selected ship order image path " + selectedShip.selectedOrderImagePath);
        StateHasChanged();
    }
    private void CreateSDSObjects(List<UnitForGameSystemDTO> data)
    {
        BroadsideSDSList = new List<BroadsideSDS>();

        foreach (var UnitForGameSystemDTO in data)
        {

            for (int i = 0; i < UnitForGameSystemDTO.NumberSelected; i++)
            {
                BroadsideSDS newItem = new BroadsideSDS();

                Console.WriteLine("UnitForGameSystemDTO.ShipsSubsInClass = " + UnitForGameSystemDTO.ShipsSubsInClass);
                if (UnitForGameSystemDTO.NumberSelected > 1)
                {
                    newItem.renameHidden = false;
                    newItem.ShipName = UnitForGameSystemDTO.Name_ClassName;
                }
                else
                {

                    newItem.ShipName = UnitForGameSystemDTO.ShipsSubsInClass;
                }

                newItem.ImagePath = "ShipImages/3/" + UnitForGameSystemDTO.Countryobj.Id + "/" + UnitForGameSystemDTO.ImagePath;

                newItem.selectedOrderImagePath = OrderCardList[0].ImagePath;
                BroadsideSDSList.Add(newItem);

            }

            // Console.WriteLine("Is order card acrive" + newItem.orderCard.CardIsActive);
        }

        if (BroadsideSDSList.Count > 0)
        {
            selectedShip = BroadsideSDSList[0];
        }
    }

    private async void ChangeSelectedShip(BroadsideSDS unitToSelect)
    {
        // Console.WriteLine("unit to select = " + unitToSelect.ShipName);
        selectedShip = unitToSelect;
        StateHasChanged();
    }

    private async void ToggleAdvancedShipView()
    {
        // Console.WriteLine("in toggleadvancedShipview");
        ShowSimpleListOfShips = !ShowSimpleListOfShips;

        if (ShowSimpleListOfShips)
        {
            toggleShipViewName = "Show summary";
        }else{
            toggleShipViewName = "Simple view";
        }

        StateHasChanged();
    }
}
 