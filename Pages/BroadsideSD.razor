
@page "/broadsideSD"
@layout NoMenuLayout
@inject IStorageService StorServ
@using ShipSelector.Services.UnitsandListsServiceClient
@inject IUnitsandListsServiceClient ULSC

@* 
    This site advised how to use the Navigationlock to stop inadvertently navigating away from the page to save data.
    Had to update VS 2022 and update to .Net 8 and then fix this project (update packages and rebuild). Surprised it actually worked.
    https://mattjameschampion.com/2023/07/04/controlling-and-preventing-navigation-events-in-blazor-using-navigationlock/
 *@

<NavigationLock ConfirmExternalNavigation="@ConfirmExternalNavigation" OnBeforeInternalNavigation="@OnBeforeInternalNavigation"></NavigationLock> 


@* <label for="confirm-external-navigation-checkbox">Confirm External Navigation</label>
<input id="confirm-external-navigation-checkbox" type="checkbox" @bind="@ConfirmExternalNavigation">
 *@



<main class="main">
    <h3>Select a Ship</h3>
    <div class="main_container">
        <div class="ship_list_nav_bar_left_container">

            @for (int r = 0; r < @BroadsideSDSList.Count; r++)
            {
                var temp  = r;
                <button class="ship_button" @onclick="() => ChangeSelectedShip(BroadsideSDSList[temp])">@BroadsideSDSList[r].ShipName</button>
            }
        </div>

        <div class="ship_sds_status_right_container">
            <div class="SDS_and_Stats">
                <div class="SDS">
                    @* Contains only the ship image *@
                    @* <img class="ship_image" src="ShipImages/3/5/Pillau.jpg" /> *@
                    <img class="ship_image" src=@selectedShip.ImagePath/>

                </div>
                <div class="ship_current_stats_and_order">
                    @* Contains editiable fields for the ship *@
                    <div class="ship_stats">
                        <div>
                            <label for="current_speed">Current Speed</label>
                            <input class="stat_input" id="current_speed" type="number" @bind-value=@selectedShip.CurrentSpeed />
                        </div>

                        <div>
                            <label for="hull_hits">Hull Hits</label>
                            <input class="stat_input" id="hull_hits" type="number" @bind-value=@selectedShip.HullHits />
                        </div>
                        <div>
                            <label for="hull_hits">Flooding hits</label>
                            <input class="stat_input" id="hull_hits" type="number" @bind-value=@selectedShip.FloodingHits />
                        </div>

                    </div>
                    <div class="ship_order">
                        <label>Ship order</label>
                        @* <select @bind=selectedShip.selectedOrderCard  Name="Name_of_list_box" @onclick="() => ChangeOrderImage()"> *@
                        <select @bind=selectedShip.selectedOrderCard Name="Name_of_list_box" @bind:after="() => ChangeOrderImage()">

                            @for (int i = 0; i < @OrderCardList.Count; i++)
                            {
                                <option value=@OrderCardList[i].id>@OrderCardList[i].Name</option>
                            }
                        </select>

                        <div class="ship_order_card_container">
                            @* <img class ="ship_order_card" src="BroadsidesCards/Orders/more_speed.jpg"/> *@
                            <img class="ship_order_card" src="@selectedShip.selectedOrderImagePath" />

                        </div>
                        <div>
                            <label for="order_active">Order is active</label>
                            <input id="order_active" type="checkbox" @bind =@selectedShip.orderIsActive/>
                        </div>
                    </div>
                </div>
            </div>
            <div class="damage_cards">
                <label>Damage Cards</label>

                <div>
                    <button>Add damage card</button>
                </div>
                <div>
                    <img class="damage_card" src="BroadsidesCards/Damage/damage_test.jpg" />
                    <img class="damage_card" src="BroadsidesCards/Damage/damage_test.jpg" />
                </div>


            </div>
        </div>


    </div>
</main>

@code {
    [Inject] IJSRuntime? JsRuntime { get; set; }
    private List<BroadsideSDS> BroadsideSDSList = new List<BroadsideSDS>();  //A list of all items that have been selected

    //selectedShip is the ship that the user has selected. The first ship in the list will be selected upon creation of this list
    private BroadsideSDS selectedShip { get; set; } = new BroadsideSDS();
    private bool ConfirmExternalNavigation { get; set; } = true;


    private List<OrderCard> OrderCardList = new List<OrderCard>();  //a list of order cards
    private List<DamageCard> DamageCardList = new List<DamageCard>();  //a list of all damage cards

    private async Task OnBeforeInternalNavigation(LocationChangingContext locationChangingContext)
    {
        if (JsRuntime is null) return;
        var continueNavigationEvent = await JsRuntime.InvokeAsync<bool>("confirm", $"You will loose any data enetered if you navigate away! Do you want to stuff it up?");
        if (!continueNavigationEvent) locationChangingContext.PreventNavigation();
    }


    protected override async Task OnInitializedAsync()
    {

        await BuildListOfOrderCards();
        await BuildListOfDamageCards();

        base.OnInitialized();
        var SelectedUnitsResponse = await StorServ.RetrieveAllUnits();

        //convert the retrieved units into BroadsideSDS objects
        CreateSDSObjects(SelectedUnitsResponse.Data);

    }

    private async Task BuildListOfDamageCards()
    {
        var broadsideCards = await ULSC.GetBroadSideDamageCards();

        int totalNumberOfCardsInDeck = 0;
        DamageCardList = new List<DamageCard>();
        foreach (var item in broadsideCards.Data)
        {
            DamageCard dc = new DamageCard();

            dc.Name = item.Name;
            dc.ImagePath = item.ImagePath;
            dc.number_cards = item.number_cards;
            dc.id = item.id;
            totalNumberOfCardsInDeck = totalNumberOfCardsInDeck + dc.number_cards;
            DamageCardList.Add(dc);
        }

        Console.WriteLine("Total num damage cards = " + totalNumberOfCardsInDeck);
    }

    private async Task BuildListOfOrderCards()
    {
        var broadsideCards = await ULSC.GetBroadSideOrderCards();

        OrderCardList = new List<OrderCard>();
        foreach (var item in broadsideCards.Data)
        {
            OrderCard oc = new OrderCard();

            oc.Name = item.Name;
            oc.ImagePath = item.ImagePath;
            oc.id = item.id;

            OrderCardList.Add(oc);
        }
    }

    private void ChangeOrderImage()
    {
        // selectedShip.selectedOrderImagePath = "/" + OrderCardList[selectedShip.selectedOrderCard].ImagePath;
        selectedShip.selectedOrderImagePath = OrderCardList[selectedShip.selectedOrderCard].ImagePath;
        Console.WriteLine("Selected ship order image path " + selectedShip.selectedOrderImagePath);
        StateHasChanged();
    }
    private void CreateSDSObjects(List<UnitForGameSystemDTO> data)
    {
        BroadsideSDSList = new List<BroadsideSDS>();

        foreach (var UnitForGameSystemDTO in data)
        {
            BroadsideSDS newItem = new BroadsideSDS();

            newItem.ShipName = UnitForGameSystemDTO.Name_ClassName;
            newItem.ImagePath = "ShipImages/3/" + UnitForGameSystemDTO.Countryobj.Id + "/" +  UnitForGameSystemDTO.ImagePath;

            newItem.selectedOrderImagePath = OrderCardList[0].ImagePath;
            BroadsideSDSList.Add(newItem);

            // Console.WriteLine("Is order card acrive" + newItem.orderCard.CardIsActive);
        }

        if (BroadsideSDSList.Count > 0)
        {
            selectedShip = BroadsideSDSList[0];
        }
    }

    private async void ChangeSelectedShip(BroadsideSDS unitToSelect)
    {
        // Console.WriteLine("unit to select = " + unitToSelect.ShipName);
        selectedShip = unitToSelect;
        StateHasChanged();
    }

}
 